try:
    from elevenlabs import voices, generate, play, stream, set_api_key, get_api_key
except ImportError:
    raise ImportError("Please install elevenlabs module: pip install elevenlabs (for installation details: https://github.com/elevenlabs/elevenlabs-python)")

import pyaudio
from typing import Iterator

# NOTE This is not very functionally solid, just a template for the API integration that can be iterated upon
class ElevenLabsTTS():
    """
    This is a TTS implementation for the ElevenLabs TTS API.
    """
    _models = [
        "eleven_multilingual_v2",
        "eleven_monolingual_v1"
    ]
    def __init__(self, api_key: str = None, voice: str ="Serena", model: str ="eleven_multilingual_v2"):
        if(model not in self._models):
            raise ValueError(f'Model not supported: {model} (must be one of: {", ".join(self._models)})')
        if(not api_key):
            api_key = get_api_key()
            if(not api_key):
                raise ValueError("No API key provided and no API key found in environment variable (ELEVENLABS_API_KEY)");
        else:
            set_api_key(api_key)
        self.voice = next(voice for voice in voices() if voice.name == voice else None)
        if(not self.voice):
            raise ValueError(f'Voice not found: {voice} (available voices: {", ".join(voices().map(lambda voice: voice.name))})')
        self.model = model

    def synthesize(self, input: str, out_filename: str = None):
        """
        Synthesize an input using the ElevenLabs TTS API.

        Args:
            sentence (str): sentence to be synthesized
            out_filename (str): output filename (Optional, if not provided, the audio will be played instead of saved)
        """
        if(not input):
            raise ValueError("Input must not be empty")
        stream = out_filename ? False : True
        audio = generate(input, self.voice, self.model, stream=stream)
        if(stream):
            play(audio)
        else:
            save(audio)
    
    def play(stream_bytes: Iterator[bytes]):
        """
        Play given bytes generated by the ElevenLabs TTS API.

        Args:
            bytes (Iterator[bytes]): bytes to be played
        """
        p = pyaudio.PyAudio()
        stream = p.open(format=p.get_format_from_width(2), channels=2, rate=16000, output=True)

        for chunk in stream_bytes:
            stream.write(chunk)

        stream.stop_stream()
        stream.close()
        p.terminate()
    
    def save(stream_bytes: Iterator[bytes], out_filename: str):
        """
        Save given bytes generated by the ElevenLabs TTS API to a file.

        Args:
            bytes (Iterator[bytes]): bytes to be saved
            out_filename (str): output filename
        """
        with open(out_filename, "wb") as f:
            for chunk in stream_bytes:
                f.write(stream_bytes)

    @staticmethod
    def get_config():
        return {
            "api_key": str,
            "language": str,
            "voice": str
        }